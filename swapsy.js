// Generated by CoffeeScript 1.3.3
var Swapsy,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Swapsy = (function() {

  function Swapsy() {
    this.order = __bind(this.order, this);

    this.eliminateDuplicates = __bind(this.eliminateDuplicates, this);
    this["new"] = new Array;
    this.elements = new Array;
  }

  Swapsy.prototype.eliminateDuplicates = function(arr) {
    var index, out, _i, _len, _results;
    out = [];
    _results = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      index = arr[_i];
      if (out.indexOf(index) === -1) {
        _results.push(out.push(index));
      }
    }
    return _results;
  };

  Swapsy.prototype.order = function(unordered_items, options) {
    var elements, index, order, _i, _j, _len, _len1;
    for (_i = 0, _len = unordered_items.length; _i < _len; _i++) {
      elements = unordered_items[_i];
      this.elements.push($(elements).data('order'));
    }
    order = this.eliminateDuplicates(this.elements);
    order = options.direction === 'asc' ? order.sort() : order.reverse();
    for (_j = 0, _len1 = order.length; _j < _len1; _j++) {
      index = order[_j];
      this["new"].push($('<div>').append($(unordered_items).closest("[data-order='" + index + "']").clone()).html());
    }
    $(options.container + ' ' + options.swapClass).remove();
    return $(options.container)[options.location](this["new"].join(" "));
  };

  return Swapsy;

})();

$.swapsy = function(args) {
  var defaults, options, swapsy, unordered_items;
  swapsy = new Swapsy;
  defaults = {
    container: '#swapsy',
    swapClass: '.item',
    location: 'append',
    direction: 'asc'
  };
  options = $.extend(defaults, args || {});
  unordered_items = $(options.container + ' ' + options.swapClass);
  return swapsy.order(unordered_items, options);
};
